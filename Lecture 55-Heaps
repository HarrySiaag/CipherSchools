
HEAPS




What is a Heap?
In Java, a heap is a specialized tree-based data structure that satisfies the heap property: the parent node is either greater than (in a max heap) 
or less than (in a min heap) its child nodes. This structure is useful for efficient sorting, priority queuing, and graph algorithms.

Types of Heaps

There are two main types of heaps:
Max Heap: In a max heap, the parent node is greater than or equal to its child nodes. This is useful for finding the maximum element in a collection.
Min Heap: In a min heap, the parent node is less than or equal to its child nodes. This is useful for finding the minimum element in a collection.

Heap Operations
The following operations can be performed on a heap:
Insert: Adding a new element to the heap while maintaining the heap property.
Extract: Removing the root element (maximum or minimum) from the heap while maintaining the heap property.
Heapify: Restoring the heap property after inserting or removing an element.

Java Implementation
Java provides a built-in implementation of heaps through the java.util.PriorityQueue class, which is a min heap. 
You can also implement your own heap using an array or a binary tree.

Common Use Cases
Heaps are useful in various scenarios, such as:
Priority Queuing: Heaps can be used to implement priority queues, where elements are ordered based on their priority.
Sorting: Heaps can be used to implement efficient sorting algorithms, such as Heapsort.
Graph Algorithms: Heaps are used in graph algorithms, such as Dijkstra's algorithm and Prim's algorithm.
Time Complexity

The time complexity of heap operations is as follows:

Insert: O(log n)
Extract: O(log n)
Heapify: O(log n)


//code


class MyHeap {
    final int capacity = 10; // Size of the array
    int[] arr = new int[capacity];
    int size = 0; // Number of elements at any particular time

    // Functions to get indexes
    int getParentIndex(int i) {
        return (i - 1) / 2;
    }

    int getLeftChildIndex(int i) {
        return 2 * i + 1;
    }

    int getRightChildIndex(int i) {
        return 2 * i + 2;
    }

    // Functions to check if the parent/children exist
    boolean hasParent(int i) {
        return getParentIndex(i) >= 0;
    }

    boolean hasLeftChild(int i) {
        return getLeftChildIndex(i) < size;
    }

    boolean hasRightChild(int i) {
        return getRightChildIndex(i) < size;
    }

    // Functions to get the value of parent/children
    int parent(int i) {
        return arr[getParentIndex(i)];
    }

    int leftChild(int i) {
        return arr[getLeftChildIndex(i)];
    }

    int rightChild(int i) {
        return arr[getRightChildIndex(i)];
    }

    boolean isEmpty() {
        return size == 0;
    }

    int peek() {
        if (isEmpty()) {
            System.out.println("The Heap is Empty. Nothing to peek!!!");
            return -1;
        }
        return arr[0];
    }

    void add(int data) {
        arr[size++] = data; // Place the element at index size and increase the size by one.
        heapifyUp(); // Create the heap from the array in a bottom-up manner
    }

    void heapifyUp() {
        int currIndex = size - 1;
        // Implement heapifyUp logic here
        // This method is incomplete in the provided snippet
    }
}

public class HeapImpl {
    public static void main(String[] args) {
        MyHeap heap = new MyHeap();
        System.out.println(heap.isEmpty());
        System.out.println(heap.peek());
        heap.add(7);
        System.out.println(heap.isEmpty());
        System.out.println(heap.peek());
        heap.add(8);
        System.out.println(heap.peek());
        heap.add(5);
        System.out.println(heap.peek());
    }
}
