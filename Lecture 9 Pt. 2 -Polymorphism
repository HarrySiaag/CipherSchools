
POLYMORPHISM


What is Polymorphism:

This word is made of 2 words, Poly means multiple and Morphism means forms.
Polymorphism is the ability to exist in multiple forms
Polymorphism is an important feature of Object Oriented Programming.

Types of Polymorphism:

Run-time Polymorphism / Method Overriding/ Dynamic(Late) Binding
Compile-time Polymorphism / Method Overloading/Static(Early) Binding

1. Method Overriding
We already know that a derived class inherits all the non private members and variables of a super class. 
But sometimes we want to change the behaviour of some method in the derived class. 
Hence we have to rewrite the method body keeping the same signature (by signature we mean name, arguments, return type). 
This is called Method Overriding.

Rules:
• The overriding method should have same signature as the method to be overridden.
• Method having high level of accessibility cannot be overridden by method having lower level of accessibility. 
  For e.g. A public method cannot be overridden by a protected or private method.
• Final Method cannot be overridden.

The return type of overriding method can be a sub class of the return type of the overridden method. 
This type of return for the overriding method is called covariant return type.

Example:
//Covariant Return

class shape
{
            shape fun()
          {
            //Overridden Method
          }
}
class rect extends shape
{
      rect fun() //Valid
      {
      //Overriding Method
      }
}



2. Method Overloading/Compile Time Polymorphism/Early Binding
Defining multiple methods with same name inside a class is called method overloading.

Rules:
• Number of parameters can be different
• If number of parameters are same, data type of parameters must be different.
• Just having different return types is not considerable for method overloading.

          void fun(int,char)
        int fun(int,int) //valid 
      int fun(int,char) //invalid

Best example of Method Overloading: println()



Differnce between Method Overriding and Method Overloading:

Purpose

Method Overloading: The purpose of method overloading is to provide multiple definitions for a method with the same name, but with different parameter lists. 
This allows for more flexibility in how a method can be called.
Method Overriding: The purpose of method overriding is to provide a specific implementation for a method that is already defined in a superclass. 
This allows for more specialized behavior in a subclass.

Method Signature

Method Overloading: In method overloading, multiple methods with the same name can have different parameter lists (i.e., different number of parameters, or different parameter types). 
The method signature (name, return type, and parameter list) must be different.
Method Overriding: In method overriding, the method signature (name, return type, and parameter list) must be exactly the same as the method in the superclass.

Inheritance

Method Overloading: Method overloading does not involve inheritance. It is a feature of a single class.
Method Overriding: Method overriding involves inheritance. A subclass provides a specific implementation for a method that is already defined in its superclass.

Compile-time vs. Runtime

Method Overloading: Method overloading is resolved at compile-time. The compiler determines which method to call based on the method signature.
Method Overriding: Method overriding is resolved at runtime. The JVM determines which method to call based on the object's class and the method signature.




//code

//method overriding

class Parent {
    void fun ()
    {
        System.out.println("Hi I'm A") ;
    }
}

class Child extends Parent{
        void fun ()
        {
            System.out.println("Hi I'm B") ;
        }
}

public class methodoverriding {

    public static void main (String[] args) {
        Child c = new Child();
        c.fun();
    }
}


//method overloading

class demo{
    void fun (){
        System.out.println("I have no Parameters");
    }
    void fun (int a){
        System.out.println("I have 1 parameter a: "+a);
    }
    void fun (int a, int b){
        System.out.println("I have 2 parameters a & b: "+a+", " + b);
    }
}

public class methodOverload {
    public static void main(String[] args){
        demo obj = new demo();
        obj.fun();
        obj.fun(5);
        obj.fun(10,20);        
    }
}

