
DYNAMIC PROGRAMMING


Dynamic Programming: A Powerful Problem-Solving Technique

Dynamic programming is a method for solving complex problems by breaking them down into smaller subproblems, solving each subproblem only once, 
and storing their solutions to subproblems to avoid redundant computation. 
This approach is particularly useful for problems that have overlapping subproblems or that can be decomposed into smaller subproblems.

Key Characteristics:
Divide and Conquer: Break down the problem into smaller subproblems.
Overlapping Subproblems: Subproblems may have some overlap, meaning that some subproblems may be identical or have similar solutions.
Memoization: Store the solutions to subproblems in a memory (e.g., an array or a table) to avoid recomputing them.

Benefits:
Efficient Computation: Dynamic programming reduces the computational time by avoiding redundant calculations.
Improved Code Readability: By breaking down the problem into smaller, manageable pieces, the code becomes more readable and easier to understand.
Optimal Solutions: Dynamic programming can guarantee optimal solutions for certain types of problems.

Common Applications:\
Fibonacci Series: A classic example of dynamic programming, where each number is the sum of the two preceding numbers.
Longest Common Subsequence: Finding the longest common subsequence between two strings.
Shortest Path Problems: Finding the shortest path between two nodes in a graph


//code


public class Fibnacci{
    static int fib(int n)//recusive apparoach
    {
        if(n<2)return n;
        return fib(n-1)+fib(n-2);
    }
    static int fibM(int n,int storage[])//approach
    {
        if(n<2)return n;
        if(storage[n]!=0)return storage[n];//step3 ->return values from array if already calculated
        storage[n] = fibM(n-1),storage)*fibM(n-2,storage);//step 2 ->store in the array
        return storage[n];
    }
    static int fibT(int n){
        int storage[] = new int[n+1];
        storage[0] = 0;
        storage[1] = 1;
        for(int i=2;i<n;i++){
            storage[i] = storage[i-1]+storage[i-2];
        }
        //array filled completely
        return storage[n];
    }
    public static void main(String args[]){
        int n=7;
        long start =System.currentTimeMillis();
        System.out.println(fib(n));
        long end = System.currentTimeMillis();
        System.out.println(n);
        int storage[] = new int[n+1];
        System.out.println(n,storage);
        end = System.currentTimeMillis();
        System.out.println("time by second approach"+(end-start));


        start = System.currentTimeMillis();
        System.out.println(fibM(n,storage));
        end = System.currentTimeMillis();
        System.out.println("time by memenization" + (end-start));
    }
}
