
STACKS

In Java, a stack is a linear data structure that follows the Last-In-First-Out (LIFO) principle, meaning the last element added to the stack is the first one to be removed. 
The Java Collections Framework provides a built-in implementation of a stack through the java.util.Stack class, which extends the Vector class. 
A stack can be used to implement recursive algorithms iteratively, parse expressions, and evaluate postfix notation, among other applications. 
The push() method is used to add an element to the top of the stack, pop() removes the top element, and peek() returns the top element without removing it. 
Additionally, the isEmpty() method checks if the stack is empty, and the size() method returns the number of elements in the stack.



//code

class MyStack
{
    final int size = 10;
    int arr[] = new int[size];
    int top = -1;

    int peek()
    {
        return arr[top];
    }
    boolean isEmpty()
    {
        return top == -1;
    }
    void push(int data)
    {
        top = top + 1;
        arr[top]=data;
    }
    int pop()
    {
        int temp = arr[top];
        top--;
        return temp;
    }
}
public class ArrayImp{
    public static void main(String[] args)
    {
        MyStack stack = new MyStack();
        System.out.println(stack.peek());
        System.out.println(stack.isEmpty());
        Stack.push(1);
        Stack.push(2);
        Stack.push(3);
        Stack.push(1);
        Stack.push(2);
        Stack.push(3);
        Stack.push(1);
        Stack.push(2);
        Stack.push(3);
        Stack.push(1);
        Stack.push(2);
        Stack.push(3);
        System.out.println(stack.isEmpty());
        System.out.println(stack.peek());
        System.out.println(stack.pop());

    }
}
