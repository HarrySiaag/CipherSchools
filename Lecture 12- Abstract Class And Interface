
INTERFACE

> An Interface is something like a blueprint of a class.
> Interfaces can have only abstract methods.
> They are used to achieve absolute abstraction and multiple inheritance in Java.
> An interface can have abstract methods and variables.
> Variables declared inside interfaces are public, static & final by default. Even if we don't use these keywords explicitly.
> Method declaration inside interfaces are public and abstract by default.

Syntax: interface A{
              int x=0;
              //public, static and final
              void area(int a); //public and abstract
              }

> A class can implement an interface using keyword implements.
> When a class implements an interface, it must override all the methods, otherwise it will become abstract and thus cannot be instantiated.
> When we override these methods, the access specifier should be public.
> Multiple Inheritance is allowed in Java through interfaces.
> If a class implements multiple interfaces containing same method declaration then it needs to be overridden only once.


//code

interface Shapes{

    double pi=3.14;
    double getSquare(double r);

}
class Square implements Shapes{
    public double getSquare(double  r){
        return r*r;
    }
}
interface M{
    void fun();
}
interface N{
    int x=20;
    void fun();
}
class imple implements  M,N{
  public   void fun(){
        System.out.println(" i am fucntion in imple");
    }
}
interface O extends M,N{
    void fun();
    default void hi(){
        System.out.println("hello");
    }
}


public class InterfaceExample implements O{
public void fun(){
    System.out.println("i am in interface O");
}


    public static void main(String[] args) {
Square a1=new Square();
        System.out.println("area of square is : "+a1.getSquare(4));
        imple a2=new imple();
        a2.fun();
        InterfaceExample a3=new InterfaceExample();
        a3.fun();
        a3.hi();
    }
}
