
TIME AND SPACE COMPLEXITY



Time Complexity:

Time complexity refers to the amount of time an algorithm takes to complete, usually measured in terms of the number of operations performed. 
It's typically expressed as a function of the input size, usually denoted as 'n'.
e.g. O(n), O(nlogn), O(1), etc.

Space Complexity:

Space complexity refers to the amount of memory an algorithm uses, usually measured in terms of the number of bytes or words required.
e.g. O(n), O(nlogn), O(1), etc.

//code

public class TimeComplexity
{
    static boolean isPrimeRam(int n)
    {
        if(n<=1)
        return false;
        if(n==2)
        return true;
        for(int i=2;i<n;i++)
        {
            if(n%i == 0) return false;
        }
        return true;
    }

    static boolean isPrimeSham(int n)
    {
        if(n<=1)
        return false;
        if(n==2)
        return true;
        for(int i=2;i<=Math.sqrt(n);i++)
        {
            if(n%i == 0) return false;
        }
        return true;
    }

    public static void main(String[] args)
    {
        int n = 100;
        long start = System.currentTimeMillis();
        System.out.println(isPrimeRam(n));
        long end = System.currentTimeMillis();
        System.out.println("Time by RAM's approach: "+(end-start));
        start = System.currentTimeMillis();
        System.out.println(isPrimeSham(n));
        end = System.currentTimeMillis();
        System.out.println("Time by SHAM's approach: "+(end-start));
    }
}
